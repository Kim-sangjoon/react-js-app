<?xml version="1.0" encoding="UTF-8" standalone="no"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:w2="http://www.inswave.com/websquare" xmlns:xf="http://www.w3.org/2002/xforms">
	<head meta_programName="멀티파일업로드" meta_programId="CMXM0101">
		<w2:type>DEFAULT</w2:type>
		<w2:buildDate/>
		<xf:model>
			<xf:instance>
				<data xmlns=""/>
			</xf:instance>
			<w2:dataCollection baseNode="map">
				<w2:dataList baseNode="list" ev:onremoverow="scwin.dlt_file_onremoverow" id="dlt_file" repeatNode="map"
					saveRemovedData="true">
					<w2:columnInfo>
						<w2:column id="chk" name="선택" dataType="text" ignoreStatus="true"></w2:column><w2:column dataType="text" id="fileId" name="파일 아이디" />
						<w2:column dataType="text" id="fileGrpId" name="파일 그룹 아이디" />
						<w2:column dataType="text" id="fileNm" name="로컬 파일명" />
						<w2:column dataType="text" id="physFilePathAddr" name="서버 파일명" />
						<w2:column dataType="text" id="status" name="상태" />
						<w2:column dataType="number" id="fileSiz" name="파일 크기" />
						<w2:column dataType="text" id="apndFileExtsNm" name="파일 타입" />
						<w2:column id="fileStrgPlcyId" name="파일저장정책ID" dataType="text"></w2:column>
						<w2:column id="fileStrgPlcyPathAddr" name="파일저장정책경로주소" dataType="text"></w2:column>
						<w2:column id="svrStrgFileNm" name="서버저장파일명" dataType="text"></w2:column>
					</w2:columnInfo>
				</w2:dataList>
				<w2:dataMap baseNode="map" id="dma_fileInfo">
					<w2:keyInfo>
						<w2:key dataType="text" id="fileGrpId" name="파일그룹아이디"/>
					</w2:keyInfo>
					<w2:data/>
				</w2:dataMap>
			</w2:dataCollection>
			<w2:workflowCollection/>
			<xf:submission abortTrigger="" action="/cmm/fileMgmt/v1/saveFile" customHandler="" encoding="UTF-8" errorHandler="" ev:submit="" ev:submitdone="scwin.sbm_saveFile_submitdone" ev:submiterror="" id="sbm_saveFile" instance="" mediatype="application/json" method="post" mode="asynchronous" processMsg="" ref='' replace="" target="">
			</xf:submission>
			<xf:submission abortTrigger="" action="/cmm/fileMgmt/v1/retrieveFile" customHandler="" encoding="UTF-8" errorHandler="" ev:submit="" ev:submitdone="scwin.sbm_retrieveFile_submitdone" ev:submiterror="" id="sbm_retrieveFile" instance="" mediatype="application/json" method="get" mode="asynchronous" processMsg="" ref="data:json,dma_fileInfo" replace="" target="">
			</xf:submission>
		</xf:model>
		<script lazy="false" type="text/javascript"><![CDATA[

	// 파일 업로드 완료 후 호출할 콜백 함수
	scwin.callBackUploadDoneFunc = null;

	// 업로드 가능한 전체 첨부 파일 개수
	scwin.maxFileCount = 0;

	// 업로드 가능한 개별 첨부 파일 크기 (단위 : Byte)
	scwin.maxFileSize = 0;

	// 업로드 가능한 전체 첨부 파일 크기 (단위 : Byte)
	scwin.totalFileSize = 0;

	// 파일 업로드 정책
	scwin.policy = "default";

	// 파일 그룹 아이디
	scwin.fileGrpId = "";

	// 업로드 서비스 호출 URL
	scwin.FILE_UPLOAD_URL = "/cmm/fileMgmt/v1/createFile";

	// 다운로드 서비스 호출 URL
	scwin.FILE_DOWNLOAD_URL = "/cmm/fileMgmt/v1/downloadFile/";

	// 파일 전송 성공 여부
	scwin.isSuccess = true;

	/**
	 * 페이지 시작 시 Loading 이벤트
	 */
	scwin.onpageload = function() {
		scwin.setFileStatus();
		mpd_multiFileUpload.changeAction(scwin.FILE_UPLOAD_URL);
		mpd_multiFileUpload.callbackXHRHandle = scwin.callbackXHRHandle;
		scwin.setDropEventHandler();
	};

	/**
	 * 파일이 업로드가 성공적으로 완료되면 호출되는 함수
	 * MultiUpload의 callbackXHRHandle 함수를 프로젝트에 맞게 재정의함.
	 */
	scwin.callbackXHRHandle = function(data) {
		var dataObj = com.util.getJSON(data.substring(5, data.indexOf("</ret>")));
		mpd_multiFileUpload.returnDataArr.push(dataObj);

		if (mpd_multiFileUpload.returnDataArr.length == mpd_multiFileUpload.fileNameArr.length) {
			var dataArr = [];
			for (var i = 0; i < mpd_multiFileUpload.returnDataArr.length; i++) {
				dataArr.push(mpd_multiFileUpload.returnDataArr[i]);
				if (dataObj.status === "S") {
					mpd_multiFileUpload.removeFile(mpd_multiFileUpload.returnDataArr[i].fileNm);
				}
			}

			if (typeof mpd_multiFileUpload.callback == "function") {
				mpd_multiFileUpload.callback(dataArr);
			}
		}
	};

	/**
	 * 파일 업로드 정책 및 기본 세팅이 완료되면 호출되는 콜백 함수
	 */
	scwin.callbackFileUploadSetting = function(policy) {
		var maxSize = com.num.parseInt(policy.maxSize);
		if (maxSize > 0) {
			scwin.maxFileSize = maxSize * 1048576;
		}

		var filter = "";
		if (com.util.isEmpty(policy.ext) === false) {
			var extArr = policy.ext.split(",");

			for (idx in extArr) {
				filter += "*." + extArr[idx] + ";";
			}
		} else {
			filter = "*.*";
		}

		mpd_multiFileUpload.setFilter("Filter", filter);

		if (com.num.parseInt(scwin.fileGrpId) > 0) {
			dma_fileInfo.set("fileGrpId", scwin.fileGrpId);
			mpd_multiFileUpload.removeAllFiles();
			scwin.retrieveFile();
		} else {
			mpd_multiFileUpload.removeAllFiles();
			dlt_file.removeAll();
			scwin.setFileStatus();
		}
	};

	/**
	 * 파일 아이디 정보 또는 기존 파일 업로드 정보 가져오기
	 */
	scwin.retrieveFile = function() {
		com.sbm.execute(sbm_retrieveFile);
	}

	/**
	 * File Drop Event Handler를 세팅한다.
	 */
	scwin.setDropEventHandler = function() {
		var fileDragDom = grd_file.render;
		fileDragDom.addEventListener("dragover", scwin.doHandleDrop, false);
		fileDragDom.addEventListener("dragenter", scwin.doHandleDrop, false);
		fileDragDom.addEventListener("dragleave", scwin.doHandleDrop, false);
		fileDragDom.addEventListener("drop", scwin.doHandleDrop, false);
	};

	/**
	 * 업로드할 파일 Drop를 업로드할 파일로 등록한다.
	 */
	scwin.doHandleDrop = function(e) {
		try {
			WebSquare.event.stopEvent(e);
			var fileData = e.dataTransfer.files;
			var uploadFileData = [];
 			for(var idx = 0; idx < fileData.length; idx++) {
	 			var isExisted = false;
	 			for (var fileIdx in mpd_multiFileUpload.fileArray) {
		 			if (fileData[idx].name === mpd_multiFileUpload.fileArray[fileIdx].name) {
			 			isExisted = true;
			 		}
		 		}

				if (isExisted === false) {
					uploadFileData.push(fileData[idx]);
					mpd_multiFileUpload.fileArray.push(fileData[idx]);
					mpd_multiFileUpload.fileNameArr.push(fileData[idx].name);
					mpd_multiFileUpload._inx++;
				}
			}

			scwin.selectCallback(uploadFileData);
			console.table(mpd_multiFileUpload.fileArray);
  		} catch (ex) {
			console.error(ex);
		}
	};

	/**
	 * 페이지 종료 시 Unloading 이벤트
	 */
	scwin.onpageunload = function() {

	};

	/**
	 * 파일 업로드 상태 정보를 업데이트 한다.
	 */
	scwin.setFileStatus = function() {
		var fileInfo = scwin.getCurrentFileInfo();
		tbx_fileCount.setValue(fileInfo.fileCount + "개 / " + scwin.maxFileCount + "개");
		tbx_fileSize.setValue(com.num.formatByte(fileInfo.fileSiz) + " / " + com.num.formatByte(scwin.totalFileSize));
	};

	/**
	 * 업로드할 파일 선택이 완료되면 호출되는 콜백 함수
	 */
	scwin.selectCallback = function(data) {
		var isValid = true;
		var fileInfo = scwin.getCurrentFileInfo();

		var newFileInfo = {
			fileCount : 0,
			fileSiz : 0
		};

		for (var idx in data) {
			if (scwin.maxFileSize < data[idx].size) {
				var alertMsg = com.data.getMessage("com.alt.0002",data[idx].name,com.num.formatByte(scwin.maxFileSize)) || data[idx].name + "파일의 크기가 " + com.num.formatByte(scwin.maxFileSize) + "를 초과 했습니다";
				com.win.alert(alertMsg);
				mpd_multiFileUpload.removeFile(data[idx].name);
				delete data[idx];
			} else {
				newFileInfo.fileCount++;
				newFileInfo.fileSiz += data[idx].size;
			}
		}

		if (scwin.maxFileCount < (fileInfo.fileCount + newFileInfo.fileCount)) {
			var alertMsg = com.data.getMessage("com.alt.0003",scwin.maxFileCount) || "업로드 가능한 전체 파일 개수" + scwin.maxFileCount + "개를 초과 했습니다";
			com.win.alert(alertMsg);
			isValid = false;
		}

		if ((scwin.totalFileSize < (fileInfo.fileSize + newFileInfo.fileSiz)) && (isValid === true)) {
			var alertMsg = com.data.getMessage("com.alt.0020",scwin.maxFileCount) || "업로드 가능한 전체 파일 용량" + com.num.formatByte(scwin.totalFileSize) + "를 초과 했습니다";
			com.win.alert(alertMsg);
			isValid = false;
		}

		if (isValid === false) {
			for (var idx in data) {
				mpd_multiFileUpload.removeFile(data[idx].name);
			}
			return;
		}

		if (data.length > 0) {
			var newFileCount = data.length;
			var fileInfoList = [];

			for (var idx in data) {
				var fileInfo = {
					"fileId" : scwin.fileId,
					"fileNm" : data[idx].name,
					"fileSiz" : data[idx].size
				};

				fileInfoList.push(fileInfo);
			}

			var lastIdx = dlt_file.getRowCount();
			dlt_file.insertJSON(lastIdx, fileInfoList);
		}

		scwin.setFileStatus();
	};

	/**
	 * 현재 업로드된 파일 정보를 반환한다.
	 */
	scwin.getCurrentFileInfo = function() {
		var fileInfo = {
			fileCount : 0,
			fileSiz : 0
		};
		var fileList = dlt_file.getAllJSON();

		for (var idx in fileList) {
			var rowStatus = fileList[idx].rowStatus;
			if ((rowStatus === "C") || (rowStatus === "U") || (rowStatus === "R")) {
				fileInfo.fileCount++;
				fileInfo.fileSiz += com.num.parseInt(fileList[idx].fileSiz);
			}
		};

		return fileInfo;
	};

	/**
	 * 전체 파일 정보를 지운다.
	 */
	scwin.clearFiles = function() {
		dlt_file.removeAll();
		mpd_multiFileUpload.setMaxFileCount(scwin.maxFileCount);
	};

	/**
	 * 파일 업로드 진행 상황을 업데이트한다.
	 */
	scwin.mpd_multiFileUpload_onprogress = function(data) {
		var rowIdx = dlt_file.getMatchedIndex("fileNm", data.fileName);

		for (var idx = 0; idx < rowIdx.length; idx++) {
			var fileInfo = dlt_file.getRowJSON(rowIdx[idx]);
			if ((fileInfo.rowStatus === "C") && (com.util.isEmpty(fileInfo.fileId) === true)) {
				if (data.percentData < 100) {
					dlt_file.setCellData(rowIdx[idx], "status", data.percentData + "%");
				} else {
					dlt_file.setCellData(rowIdx[idx], "status", "S");
				}
			}
		}
	};

	/**
	 * 파일 업로드가 완료되면 호출되는 콜백 함수
	 */
	scwin.mpd_multiFileUpload_ondone = function(data) {
		scwin.isSuccess = true;
		var newFileCount = data.length;

		for (var fileIdx = 0; fileIdx < newFileCount; fileIdx++) {
			var rowIdx = dlt_file.getMatchedIndex("fileNm", data[fileIdx].fileNm);

			for (var idx = 0; idx < rowIdx.length; idx++) {
				var fileInfo = dlt_file.getRowJSON(rowIdx[idx]);
				if ((fileInfo.rowStatus === "C") && (com.util.isEmpty(fileInfo.fileGrpId) === true)) {
					if (data[fileIdx].status === "S") {
						dlt_file.setRowJSON(rowIdx[idx], data[fileIdx], true);
					} else {
						dlt_file.setRowJSON(rowIdx[idx], data[fileIdx], true);
						scwin.isSuccess = false;
					}
				}
			}
		}

		if (typeof scwin.callBackUploadDoneFunc === "function") {
			var updatedFileInfo = dlt_file.getModifiedJSON( { saveRemovedData:false });
			var option = {
				requestData : {
					fileList : updatedFileInfo
				}
			};

			com.sbm.execute(sbm_saveFile, option);
		}
	};

	/**
	 * 업로드 상태 표시 Display Formatter
	 */
	scwin.setDisplayStatus = function(value) {
		if (value === "S") {
			return "Completed";
		} else if (value === "E") {
			return "Error";
		} else if ((value > 0) && (value < 100)) {
			return '<div class="progress" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"><div style="width:' + value + '%" class="progress-bar"></div></div>'
		} else {
			return "";
		}
	};

	/**
	 * 업로드하려는 파일을 다시 삭제할 때 발생하는 이벤트
	 */
	scwin.dlt_file_onremoverow = function(info) {
		for (var idx in info.removedDataObj) {
			var fileName = info.removedDataObj[idx][2];
			mpd_multiFileUpload.removeFile(fileName);
		}

		scwin.setFileStatus();
	};

	/**
	 * 기존에 등록된 파일을 Double Click 클릭하면 파일다운로드가 동작함
	 */
	scwin.customFormatterFileNm = function(data, formattedData, rowIndex, colIndex ) {
		var fileId = dlt_file.getCellData(rowIndex, "fileId");
		var fileGrpId = dlt_file.getCellData(rowIndex, "fileGrpId");
		if (com.util.isEmpty(fileId) === false) {
			return "<a href='" + scwin.FILE_DOWNLOAD_URL +  fileId + "' target='_blank'>" + formattedData + "</a>";
		} else {
			return formattedData;
		}
	};

	/**
	 * 선택된 파일을 삭제한다.
	 */
	scwin.btn_deleteFile_onclick = function(e) {
		var rowIndex = dlt_file.getMatchedIndex("chk", "1");

		for (var idx = rowIndex.length; idx >= 0; idx--) {
			var rowStatus = dlt_file.getRowStatus(rowIndex[idx]);
			if (rowStatus === "R") {
				dlt_file.deleteRow(rowIndex[idx]);
			} else if (rowStatus === "C") {
				mpd_multiFileUpload.removeFile(dlt_file.getCellData(rowIndex[idx], "fileNm"));
				dlt_file.removeRow(rowIndex[idx]);
			}
		}
	};

	/**
	 * 파일 사이즈를 적절한 포맷으로 변환해서 반환한다.
	 */
	scwin.displayFileSize = function(value) {
		return com.num.formatByte(value);
	};

	/**
	 * 파일 삭제 후 콜백 함수
	 */
	scwin.sbm_saveFile_submitdone = function(e) {

		if(e.responseJSON.SERVER_MESSAGE.code == "200") {
			// 삭제 제거
			dlt_file.removeRows(dlt_file.getDeletedIndex());

			// insert 건수가 있으면, dlt_file 값 업데이트
			if(e.responseJSON.SERVER_RESULT.length > 0) {
				e.responseJSON.SERVER_RESULT.forEach(function(elt, i, array) {
					var rowIndex = dlt_file.getMatchedIndex("fileNm", elt.fileNm, "true")[0];
					dlt_file.setRowJSON(rowIndex, elt, true);
				});
			}

			scwin.setFileStatus();
			dlt_file.reform();
			scwin.callBackUploadDoneFunc(com.util.getUpdatedFile(dlt_file), scwin.isSuccess);
		}
		else {
			scwin.callBackUploadDoneFunc([], false);
		}
	};

	/**
	 * 파일 아이디 가져오기 또는 파일 정보 반환 Submit Done 함수
	 */
	scwin.sbm_retrieveFile_submitdone = function(e) {
		if (e.responseJSON.SERVER_RESULT.fileList.length > 0) {
			dlt_file.setJSON(e.responseJSON.SERVER_RESULT.fileList);
			scwin.setFileStatus();
			scwin.fileGrpId = e.responseJSON.SERVER_RESULT.fileList[0].fileGrpId;
		} else {
			if (com.util.isEmpty(e.responseJSON.SERVER_RESULT.fileGrpId) === false) {
				scwin.fileGrpId = e.responseJSON.SERVER_RESULT.fileGrpId;
			}
			scwin.setUploadParam();
			mpd_multiFileUpload.startUpload();
		}
	};

	/**
	 * 파일 업로드 전에 파라미터 정보를 세팅한다.
	 */
	scwin.setUploadParam = function() {
		var fileCount = mpd_multiFileUpload.getFileCount();
		for (var idx = 0; idx < fileCount; idx++) {
			mpd_multiFileUpload.setParam(idx, "policy", scwin.policy);
			mpd_multiFileUpload.setParam(idx, "fileGrpId", scwin.fileGrpId);
		}
	};

	/**
	 * 파일 업로드 과정에서 에러 발생 시 발생하는 이벤트 함수
	 */
	scwin.mpd_multiFileUpload_onerror = function(data) {

	};
	]]></script>
	</head>
	<body ev:onpageload="scwin.onpageload" ev:onpageunload="scwin.onpageunload">
		<xf:group class="gvwbox" id="">
			<xf:group class="gvw_header" id="" style="">
				<xf:group class="lta" id="" style="">
					<xf:group class="mpd_box" id="">
						<xf:group class="w2trigger btn_df btn_md" id="btn_addFile" style="" tagname="button">
							<w2:attributes>
								<w2:type>button</w2:type>
							</w2:attributes>
							<w2:textbox class="fa fa-plus" id="" label="" style="" tagname="i">
								<w2:attributes>
									<w2:aria-hidden>true</w2:aria-hidden>
								</w2:attributes>
							</w2:textbox>
							<w2:textbox id="" label="추가" style="" tagname="span" />
						</xf:group>
						<w2:multiupload action="" displaySizeUnit="MB" ev:onComplete="" ev:ondone="scwin.mpd_multiFileUpload_ondone"
							ev:onerror="scwin.mpd_multiFileUpload_onerror" ev:onprogress="scwin.mpd_multiFileUpload_onprogress" filter="" fireEventOnError=""
							id="mpd_multiFileUpload" maxcount="" maxsize="1000000000" mode="html5_transparent" selectCallback="scwin.selectCallback" style=""
							uploadButton="" wmode="false">
						</w2:multiupload>
					</xf:group>
					<xf:group class="w2trigger btn_df btn_md" ev:onclick="scwin.btn_deleteFile_onclick" id="btn_deleteFile" style=""
						tagname="button">
						<w2:attributes>
							<w2:type>button</w2:type>
						</w2:attributes>
						<w2:textbox class="fa fa-minus" id="" label="" style="" tagname="i">
							<w2:attributes>
								<w2:aria-hidden>true</w2:aria-hidden>
							</w2:attributes>
						</w2:textbox>
						<w2:textbox id="" label="삭제" style="" tagname="span" />
					</xf:group>
				</xf:group>
				<xf:group class="rta" id="" style="">
					<xf:group class="mpd_info" id="" tagname="">
						<xf:group class="info tip" id="" style="" tagname="span">
							<w2:textbox class="fa fa-info-circle" id="" label="" style="" tagname="i"/>
							<w2:textbox class="" id="" label="" style="" tagname="p"/>
						</xf:group>
						<w2:textbox class="file_count" id="" label="파일 수 : " style="" tagname="span"/>
						<w2:textbox class="" id="tbx_fileCount" label="0개/ 10개," style="" tagname="span"/>
						<w2:textbox class="file_size" id="" label="첨부파일 총 용량 : " style="" tagname="span"/>
						<w2:textbox class="" id="tbx_fileSize" label="0MB / 200MB" style="" tagname="span"/>
					</xf:group>
				</xf:group>

			</xf:group>
			<w2:gridView autoFit="allColumn" class="wq_gvw" dataList="data:dlt_file" defaultCellHeight="32" ev:oncellclick="" ev:onheaderclick="" focusMode="row" id="grd_file" rowNumVisible="" rowNumWidth="" rowStatusHeaderValue="상태" rowStatusVisible="true" rowStatusWidth="50" scrollByColumn="false" scrollByColumnAdaptive="false" sortable="true" style="height:66px;" visibleRowNum="5" wheelRows="0">
				<w2:caption id="caption1" style="" value="this is a grid caption."/>
				<w2:header id="header1" style="">
					<w2:row id="row1" style="">
						<w2:column blockSelect="false" displayMode="label" fixColumnWidth="true" id="chkHeader" inputType="checkbox" removeBorderStyle="false" style="" value="Chk" width="40">
						</w2:column>
						<w2:column blockSelect="false" displayMode="label" id="column11" inputType="text" removeBorderStyle="false" style="" value="파일명" width="350">
						</w2:column>
						<w2:column blockSelect="false" displayMode="label" id="column14" inputType="text" removeBorderStyle="false" style="" value="전송결과" width="100">
						</w2:column>
						<w2:column blockSelect="false" displayMode="label" id="column7" inputType="text" removeBorderStyle="false" style="" value="파일크기" width="100">
						</w2:column>
					</w2:row>
				</w2:header>
				<w2:gBody id="gBody1" style="">
					<w2:row id="row2" style="">
						<w2:column blockSelect="false" displayMode="label" id="chk" inputType="checkbox" removeBorderStyle="false" width="40">
						</w2:column>
						<w2:column blockSelect="false" customFormatter="scwin.customFormatterFileNm" displayMode="label" id="fileNm" inputType="text" readOnly="true" removeBorderStyle="false" textAlign="left" width="350">
						</w2:column>
						<w2:column blockSelect="false" class="gvw_progress" displayFormatter="scwin.setDisplayStatus" displayMode="label" expression="" id="status" inputType="text" readOnly="true" removeBorderStyle="false" width="100">
						</w2:column>
						<w2:column blockSelect="false" displayFormatter="scwin.displayFileSize" displayMode="label" id="fileSiz" inputType="text" readOnly="true" removeBorderStyle="false" textAlign="right" width="100">
						</w2:column>
					</w2:row>
				</w2:gBody>
			</w2:gridView>
		</xf:group>
	</body>
</html>